digraph "CSysSolve::RFGMRES_LinSolver"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="CSysSolve::RFGMRES\l_LinSolver",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Flexible Generalized Minimal Residual method with restarts (frequency comes from config)."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="CConfig::GetLinear\l_Solver_Restart_Frequency",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCConfig.html#a4cb8f098a3ab322cc8775fe200f8b3eb",tooltip="Get restart frequency of the linear solver for the implicit formulation."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="CSysVector::norm",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCSysVector.html#a55d36be09dfc5bed32246727f25cb7f5",tooltip="L2 norm of the vector."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="sqrt",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__SIMD.html#ga54a1925ab40fb4249ea255072520de35",tooltip=" "];
  Node3 -> Node5 [id="edge4_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="CSysVector::squaredNorm",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCSysVector.html#a5a7712aa50a8edc522e54bff5481493c",tooltip="Squared L2 norm of the vector (via dot with self)."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="CSysVector::dot",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCSysVector.html#a96c613a08177a0f6105a635a92b138b0",tooltip="Dot product between \"this\" and an expression."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="CBaseMPIWrapper::Allreduce",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCBaseMPIWrapper.html#a381d4b3738c09d92ee1ae9f89715b541",tooltip=" "];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="CBaseMPIWrapper::CopyData",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCBaseMPIWrapper.html#a3c28692a4cab67ad0f81d18273db3d23",tooltip=" "];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="CBaseMPIWrapper::Error",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCBaseMPIWrapper.html#a04457c47629bda56704e6a8804833eeb",tooltip=" "];
  Node9 -> Node10 [id="edge9_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="CBaseMPIWrapper::Abort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCBaseMPIWrapper.html#af7297d861dca86b45cf561b6ab642e8f",tooltip=" "];
  Node6 -> Node11 [id="edge10_Node000006_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="atomicAdd",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$omp__structure_8hpp.html#a9465b8cb1d384f41bbb5f3c04ec815de",tooltip="Atomically update a (shared) lhs value with a (local) rhs value."];
  Node6 -> Node12 [id="edge11_Node000006_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="VecExpr::CVecExpr::\lderived",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classVecExpr_1_1CVecExpr.html#a6054e646d0793f8d3a2075a7392b93fd",tooltip="Cast the expression to Derived, usually to allow evaluation via operator[]."];
  Node6 -> Node13 [id="edge12_Node000006_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="CBaseMPIWrapper::GetComm",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classCBaseMPIWrapper.html#a8154391fc3522954802889d81d4ef5da",tooltip=" "];
}
